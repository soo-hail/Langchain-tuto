import os
import time
import streamlit as st
from langchain_groq import ChatGroq
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.document_loaders import PyPDFDirectoryLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import OllamaEmbeddings 
from langchain_community.vectorstores import FAISS
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain

# Load Env-Variables.
from dotenv import load_dotenv

load_dotenv()
os.environ['GROQ_API_KEY'] = os.getenv('GROQ_API_KEY')

# Initialize LLM-model.
llm = ChatGroq(
    groq_api_key = os.getenv('GROQ_API_KEY'),
    model = "llama-3.1-70b-versatile",
    temperature = 0,
)

# Create Prompt Template.
prompt = ChatPromptTemplate.from_template(
"""
    Answer the questions based on the provided context only.
    Please provide the most accurate response based on the question
    <context>
    {context}
    <context>
    Questions:{input}

"""
)

# Load, Transform and Emmbedding Data.
if 'db' not in st.session_state:
    # Load Webpage
    st.session_state.loader = PyPDFDirectoryLoader('./data')
    st.session_state.docs = st.session_state.loader.load()
    
    # Data Transformation(Tokenization).
    st.session_state.text_splitter = RecursiveCharacterTextSplitter(chunk_size = 1000, chunk_overlap = 200) # Create Instance.
    st.session_state.final_documents = st.session_state.text_splitter.split_documents(st.session_state.docs[:50])
    
    # Embedding
    st.session_state.embeddings = OllamaEmbeddings()
    st.session_state.db = FAISS.from_documents(st.session_state.final_documents, st.session_state.embeddings) # Vector Store.
    
    
input_text = st.text_input('Ask LLAMA3')

if input_text:
    # Create Retriever.
    retriever = st.session_state.db.as_retriever() # provides context to LLMs 
    document_chain = create_stuff_documents_chain(llm, prompt) # Build Prompt for LLM using content(pdfs)
    retrieval_chain = create_retrieval_chain(retriever, document_chain) # REsponsible for interacting with db and LLM.
    
    # Track Processing Time
    start_time = time.process_time()
    response=retrieval_chain.invoke({'input': input_text})
    print(f'Response Time: {time.process_time() - start_time}')
    st.write(response['answer']) # Output generated by genrative-Model(llama3).
    
    # With a Streamlit Expander - show page-content loaded by retriver-model.
    with st.expander("Document Similarity Search"):
        # Find the relevant chunks
        for i, doc in enumerate(response["context"]):
            st.write(doc.page_content)
            st.write("--------------------------------")